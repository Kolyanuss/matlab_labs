% 1. Завантажте з бібліотеки MATLAB декілька кольорових і чорно-білих зображень різного характеру
colorImage = imread('peppers.png');
bwImage = imread('cameraman.tif');

% 2. З використанням функції rgb2gray перетворіть кольорові зображення в чорно-білі. Відобразіть результат.
grayImage = rgb2gray(colorImage);
figure, imshow(grayImage), title('Чорно-біле зображення');
pause;

% 3. З використанням функції dct2 виконайте дискретне косинусне перетворення зображень.
dctImage = dct2(grayImage);

% Відобразіть результат ДКП у вигляді зображення з використанням функції imshow.
% Під час відображенні масиву ДКП-коефіцієнтів використовуйте логарифмічний масштаб.
figure, imshow(log(abs(dctImage)),[]), colormap(jet(64)), colorbar;
pause;

% 4. З використанням функції idct2 відновіть зображення за його ДКП-спектру.
idctImage = idct2(dctImage);
figure, imshow(idctImage,[]), title('Відновлене зображення');
pause;

% 5. З використанням процедури целочислового ділення/множення J = N*round(J*N); виконайте квантування результатів ДКП для різних значень кроку квантування N.
N = 0.02; % Змініть це значення для різних кроків квантування
quantDCT = N * round(dctImage / N);

% 6. Відобразіть результати у вигляді зображення ( як і раніше для ДКП – у логарифмічному масштабі).
figure, imshow(log(abs(quantDCT)),[]), colormap(jet(64)), colorbar;
pause;

% 7. З використанням функції idct2 відновіть зображення за квантованим ДКП-спектром для різних значень кроку квантування.
idctQuantImage = idct2(quantDCT);
figure, imshow(idctQuantImage,[]), title('Відновлене зображення з квантованим ДКП-спектром');
pause;

% 9. Чи можливо добитися аналогічної мети й результату, квантуючи вихідне зображення, а не коефіцієнти його ДКП? 
% Перевірте це на практиці, квантуючи з використанням процедури I = (round(J/n))*n вихідні зображення й відобразіть отриманий результат.
quantImage = (round(double(grayImage) / N)) * N;
figure, imshow(quantImage,[]), title('Квантоване зображення');
pause;
close all;
